{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"console",
				"console.log"
			],
			[
				"fon",
				"font-size"
			],
			[
				"ngre",
				"ng-repeat\tAngularJS"
			],
			[
				"data",
				"data_param"
			],
			[
				"main",
				"mainc"
			],
			[
				"$scope",
				"$scope.dta"
			],
			[
				"$sc",
				"$scope.dta"
			],
			[
				"$s",
				"$scope.dta"
			],
			[
				"dataa",
				"dataIsDeclared〔variable〕"
			],
			[
				"try",
				"try〔keyword〕"
			],
			[
				"vehic",
				"vehicle_offset_x"
			],
			[
				"lo",
				"lon"
			],
			[
				"lat",
				"lat"
			],
			[
				"nav",
				"nav_roll"
			],
			[
				"a",
				"alt"
			],
			[
				"air",
				"airspeed"
			],
			[
				"V",
				"VFR_HUD"
			],
			[
				"dat",
				"data_stream"
			],
			[
				"D",
				"DST"
			],
			[
				"scope",
				"$scope\tAngularJS"
			],
			[
				"sco",
				"$scope\tAngularJS"
			],
			[
				"ge",
				"getElementById"
			]
		]
	},
	"buffers":
	[
		{
			"file": "MAVProxy/modules/mavproxy_cesium/app/static/DST/js/hud.js",
			"settings":
			{
				"buffer_size": 13597,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "'''\nCesium map module\nSamuel Dudley\nJan 2016\n'''\n\nimport os, json, time, sys, uuid, urllib2\n\nfrom MAVProxy.modules.lib import mp_module\nfrom MAVProxy.modules.lib import mp_settings\n\nfrom pymavlink import mavutil\nimport threading, Queue\n\nfrom autobahn.twisted.websocket import WebSocketServerProtocol, WebSocketServerFactory\nfrom twisted.python import log\nfrom twisted.internet import reactor\n\nclass ServerProtocol(WebSocketServerProtocol):\n\n    def onConnect(self, request):\n        print(\"Client connecting: {0}\".format(request.peer))\n\n    def onOpen(self):\n        print(\"WebSocket connection open\")\n        self.id = uuid.uuid4()\n        self.factory.data[self.id]=self\n        payload = {'new_connection':self.id}\n        self.factory.message_queue.put(payload)\n\n    def onMessage(self, payload, isBinary):\n        if isBinary:\n            # TODO: handle binary\n            pass\n        else:\n            # It's text based (JSON)\n            payload = json.loads(payload)\n            self.factory.message_queue.put(payload)\n\n    def onClose(self, wasClean, code, reason):\n        print(\"WebSocket connection closed: {0}\".format(reason))\n        del self.factory.data[self.id]\n\n        \nclass CesiumModule(mp_module.MPModule):\n\n    def __init__(self, mpstate):\n        super(CesiumModule, self).__init__(mpstate, \"cesium\", \"Cesium map module\", public = True)\n        self.add_command('cesium', self.cmd_cesium, [\"\"])\n        \n        self.data_stream = ['NAV_CONTROLLER_OUTPUT', 'VFR_HUD', 'ATTITUDE', 'GLOBAL_POSITION_INT', 'SYS_STATUS', 'MISSION_CURRENT', 'STATUSTEXT', 'FENCE_STATUS']\n\n        \n        self.wp_change_time = 0\n        self.fence_change_time = 0\n        self.rally_change_time = 0\n        self.flightmode = None\n        \n        self.cesium_settings = mp_settings.MPSettings(\n            [ ('localwebserver', bool, True),\n              ('debug', bool, False)])\n        \n        self.aircraft = {'lat':None, 'lon':None, 'alt_wgs84':None,\n                         'roll':None, 'pitch':None, 'yaw':None}\n        self.pos_target = {'lat':None, 'lon':None, 'alt_wgs84':None}\n        self.fence = {}\n        self.mission = {}\n        \n        self.web_server_thread = None\n        self.socket_server_thread = None\n        \n        self.run_web_server()\n        self.run_socket_server()\n        \n    def run_socket_server(self):\n        # log.startLogging(sys.stdout)\n        self.factory = WebSocketServerFactory(u\"ws://0.0.0.0:9000\")\n        self.factory.protocol = ServerProtocol\n        self.factory.setProtocolOptions(maxConnections=100)\n        self.factory.data = {}\n        self.factory.message_queue = Queue.Queue()\n        \n        reactor.listenTCP(9000, self.factory)\n        self.socket_server_thread = threading.Thread(target=reactor.run, args=(False,))\n        self.socket_server_thread.daemon = True\n        self.socket_server_thread.start()\n        \n    def stop_socket_server(self):\n        if self.socket_server_thread is not None:\n            reactor.callFromThread(reactor.stop) # Kill the socket server talking to the browser\n            while self.socket_server_thread.isAlive():\n                time.sleep(0.01) #TODO: handle this better...\n        \n    def run_web_server(self):\n        '''optionally launch the webserver on the local machine'''\n        if self.cesium_settings.localwebserver:\n            from app import cesium_web_server\n            self.web_server_thread = threading.Thread(target=cesium_web_server.start_server, kwargs={'debug':self.cesium_settings.debug})\n            self.web_server_thread.daemon = True\n            self.web_server_thread.start()\n    \n    def stop_web_server(self):\n        if self.web_server_thread is not None:\n            urllib2.urlopen('http://127.0.0.1:5000/exit') # Kill the web server\n            while self.web_server_thread.isAlive():\n                time.sleep(0.01) #TODO: handle this better...\n        \n    def send_data(self, data, target = None):\n        '''push json data to the browser'''\n        payload = json.dumps(data).encode('utf8')\n        if target is not None:\n            connection = self.factory.data[target]\n            reactor.callFromThread(WebSocketServerProtocol.sendMessage, connection,  payload)\n        else:   \n            for connection in self.factory.data.values():\n                reactor.callFromThread(WebSocketServerProtocol.sendMessage, connection,  payload)\n\n    def cmd_cesium(self, args):\n        '''cesium command parser'''\n        usage = \"usage: cesium <restart> <set> (CESIUMSETTING)\"\n        if len(args) == 0:\n            print(usage)\n            return\n        if args[0] == \"set\":\n            self.cesium_settings.command(args[1:])\n        elif args[0] == \"count\":\n            print('%u connected' % int(len(self.factory.data)))\n        elif args[0] == \"restart\":\n            self.restart()\n        else:\n            print(usage)\n            \n    def send_defines(self, target = None):\n        '''get the current mav defines and send them'''\n        miss_cmds = {}\n        frame_enum = {0: \"Abs\", 3: \"Rel\", 10: \"AGL\"}\n        \n        # auto-generate the list of mission commands\n        for cmd in mavutil.mavlink.enums['MAV_CMD']:\n            enum = mavutil.mavlink.enums['MAV_CMD'][cmd]\n            name = enum.name\n            name = name.replace('MAV_CMD_','')\n            if name == 'ENUM_END':\n                continue\n            miss_cmds[cmd] = name\n        \n        self.defines = {}\n        self.defines['frame_enum'] = frame_enum\n        self.defines['mission_commands'] = miss_cmds\n        self.send_data({\"defines\":self.defines}, target = target)\n\n\n    def send_fence(self):\n        '''load and draw the fence in cesium'''\n        self.fence = {}\n        self.fence_points_to_send = self.mpstate.public_modules['fence'].fenceloader.points\n        for point in self.fence_points_to_send:\n            point_dict = point.to_dict()\n            iidx = point_dict['idx']\n            del point_dict['idx']\n            if idx != 0: # dont include the return location\n                self.fence[idx] = point_dict\n        self.send_data({\"fence_data\":self.fence})\n            \n    def send_mission(self):\n        '''load and draw the mission in cesium'''\n        self.mission = {}\n        self.mission_points_to_send = self.mpstate.public_modules['wp'].wploader.wpoints\n        for point in self.mission_points_to_send:\n            point_dict = point.to_dict()\n            seq = point_dict['seq']\n            del point_dict['seq']\n            self.mission[seq] = point_dict\n        self.send_data({\"mission_data\":self.mission})\n        \n    def send_flightmode(self):\n        self.send_data({\"flightmode\":self.master.flightmode})\n        self.flightmode = self.master.flightmode\n        \n    def restart(self):\n        '''restart the web server'''\n        self.stop_web_server() \n        self.run_web_server()\n\n    def mavlink_packet(self, m):\n        '''handle an incoming mavlink packet'''\n        if self.master.flightmode != self.flightmode:\n            self.send_flightmode()\n        \n        if m.get_type() == 'POSITION_TARGET_GLOBAL_INT':\n            msg_dict = m.to_dict()\n            self.pos_target['lat']= msg_dict['lat_int']\n            self.pos_target['lon'] = msg_dict['lon_int']\n            self.pos_target['alt_wgs84'] = msg_dict['alt']\n             \n            if None not in self.pos_target.values():\n                self.send_data({\"pos_target_data\":self.pos_target})\n        \n        if m.get_type() in self.data_stream:\n            msg_dict = m.to_dict()\n            msg_dict['timestamp'] = m._timestamp\n            self.send_data({'mav_data':msg_dict})\n                   \n                \n        # if the waypoints have changed, redisplay\n        last_wp_change = self.module('wp').wploader.last_change\n        if self.wp_change_time != last_wp_change and abs(time.time() - last_wp_change) > 1:\n            self.wp_change_time = last_wp_change\n            self.send_mission()\n\n            # this may have affected the landing lines from the rally points:\n            self.rally_change_time = time.time()\n    \n        # if the fence has changed, redisplay\n        if self.fence_change_time != self.module('fence').fenceloader.last_change:\n            self.fence_change_time = self.module('fence').fenceloader.last_change\n            self.send_fence()\n                \n    def idle_task(self):\n        '''called on idle'''\n        while not self.factory.message_queue.empty():\n            payload = self.factory.message_queue.get_nowait()\n            if self.cesium_settings.debug:\n                print payload\n                \n            if 'new_connection' in payload.keys():\n                self.send_defines(target=payload['new_connection'])\n                self.send_fence()\n                self.send_mission()\n                self.send_flightmode()\n            \n            elif 'mode_set' in payload.keys():\n                self.mpstate.functions.process_stdin('%s' % (payload['mode_set']))\n            \n            elif 'wp_set' in payload.keys():\n                self.mpstate.functions.process_stdin('wp set %u' % int(payload['wp_set']))\n            \n            elif 'wp_move' in payload.keys():\n                self.mpstate.functions.process_stdin('wp move %u %f %f' % (\n                                                                           int(payload['wp_move']['idx']),\n                                                                           float(payload['wp_move']['lat']),\n                                                                           float(payload['wp_move']['lon'])\n                                                                           )\n                                                     )\n\n            elif 'wp_remove' in payload.keys():\n                self.mpstate.functions.process_stdin('wp remove %u' % int(payload['wp_remove']))\n            \n            elif 'wp_list' in payload.keys():\n                self.mpstate.functions.process_stdin('wp list')\n                \n            elif 'fence_list' in payload.keys():\n                self.mpstate.functions.process_stdin('fence list')\n            \n            else:\n                pass\n   \n    def unload(self):\n        '''unload module'''\n        self.stop_socket_server()\n        self.stop_web_server()\n        \n        \ndef init(mpstate):\n    '''initialise module'''\n    return CesiumModule(mpstate)\n\n\n\n",
			"file": "MAVProxy/modules/mavproxy_cesium/__init__.py",
			"file_size": 10380,
			"file_write_time": 131369021906775163,
			"settings":
			{
				"buffer_size": 10380,
				"line_ending": "Unix"
			}
		},
		{
			"file": "MAVProxy/modules/mavproxy_cesium/app/cesium_web_server.py",
			"settings":
			{
				"buffer_size": 2183,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "MAVProxy/modules/mavproxy_cesium/README.md",
			"settings":
			{
				"buffer_size": 5977,
				"line_ending": "Unix"
			}
		},
		{
			"file": "MAVProxy/modules/mavproxy_cesium/app/templates/base.html",
			"settings":
			{
				"buffer_size": 186,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "MAVProxy/modules/mavproxy_cesium/app/static/DST/js/core.js",
			"settings":
			{
				"buffer_size": 25469,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "MAVProxy/modules/mavproxy_cesium/app/templates/index.html",
			"settings":
			{
				"buffer_size": 3773,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "MAVProxy/modules/mavproxy_cesium/app/static/DST/js/add_fun.js",
			"settings":
			{
				"buffer_size": 935,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 372.0,
		"last_filter": "Package Control: ",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"package",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Install Package Control"
			]
		],
		"width": 527.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/varun/PX2/MAVProxy/MAVProxy/modules/mavproxy_cesium",
		"/home/varun/PX2/Basic Testing/Test4",
		"/home/varun/PX2/Basic Testing/Test4/css",
		"/home/varun/PX2/Basic Testing/Test4/js",
		"/home/varun/PX2/Basic Testing/Test4/static"
	],
	"file_history":
	[
		"/home/varun/PX2/Basic Testing/Test4/Test4.html",
		"/home/varun/PX2/Basic Testing/Test4/static/tested.html",
		"/home/varun/PX2/MAVProxy/MAVProxy/modules/mavproxy_cesium/app/templates/attitude.html",
		"/home/varun/PX2/Basic Testing/Test4/static/datastream.json",
		"/home/varun/PX2/Basic Testing/Test4/css/test.css",
		"/home/varun/PX2/Basic Testing/Test4/js/controller.js",
		"/home/varun/PX2/MAVProxy/MAVProxy/modules/mavproxy_cesium/app/static/DST/js/third_party/ngDraggable.js",
		"/home/varun/PX2/Basic Testing/Test4/Test3.html",
		"/home/varun/PX2/Envs/material-start/app/index.html",
		"/home/varun/PX2/Envs/material-start/app/config.js",
		"/home/varun/PX2/Basic Testing/T2/t2.html",
		"/home/varun/PX2/Basic Testing/Test3/Test3.html",
		"/home/varun/PX2/Basic Testing/Test3/css/test.css",
		"/home/varun/PX2/MAVProxy/MAVProxy/modules/mavproxy_cesium/app/cesium_web_server.py",
		"/home/varun/PX2/MAVProxy/MAVProxy/modules/mavproxy_cesium/app/static/DST/js/add_fun.js",
		"/home/varun/PX2/MAVProxy/MAVProxy/modules/mavproxy_cesium/app/templates/index.html",
		"/home/varun/PX2/MAVProxy/MAVProxy/modules/mavproxy_cesium/app/static/DST/js/wp.js",
		"/home/varun/PX2/MAVProxy/MAVProxy/modules/mavproxy_cesium/app/static/DST/js/hud.js",
		"/home/varun/PX2/MAVProxy/MAVProxy/modules/mavproxy_cesium/__init__.py",
		"/home/varun/PX2/MAVProxy/MAVProxy/modules/mavproxy_cesium/app/static/DST/js/core.js",
		"/home/varun/PX2/MAVProxy/MAVProxy/modules/mavproxy_cesium/app/static/DST/js/websocket.js",
		"/home/varun/PX2/MAVProxy/MAVProxy/modules/mavproxy_cesium/app/static/DST/js/util.js",
		"/home/varun/PX2/MAVProxy/MAVProxy/modules/mavproxy_cesium/app/static/DST/js/settings.js",
		"/home/varun/PX2/MAVProxy/MAVProxy/modules/mavproxy_cesium/app/static/DST/js/cesium_setup.js",
		"/home/varun/PX2/MAVProxy/MAVProxy/modules/mavproxy_cesium/app/static/DST/js/context_menu.js",
		"/home/varun/PX2/MAVProxy/MAVProxy/modules/mavproxy_cesium/app/static/Build/Cesium/Cesium.js",
		"/home/varun/PX2/MAVProxy/MAVProxy/modules/mavproxy_cesium/app/static/DST/js/base_ang.js",
		"/home/varun/PX2/MAVProxy/MAVProxy/modules/mavproxy_cesium/app/static/DST/css/cesium.css",
		"/home/varun/PX2/MAVProxy/build/lib.linux-x86_64-2.7/MAVProxy/modules/mavproxy_cesium/app/static/DST/css/cesium.css",
		"/home/varun/PX2/MAVProxy/MAVProxy/modules/mavproxy_cesium/app/static/Build/CesiumUnminified/Cesium.js",
		"/home/varun/PX2/MAVProxy/MAVProxy/modules/mavproxy_cesium/app/static/Build/Documentation/UrlTemplateImageryProvider.html",
		"/home/varun/PX2/MAVProxy/MAVProxy/modules/mavproxy_cesium/app/static/DST/js/meters.js",
		"/home/varun/PX2/MAVProxy/build/lib.linux-x86_64-2.7/MAVProxy/modules/mavproxy_fence.py",
		"/home/varun/PX2/MAVProxy/MAVProxy/modules/mavproxy_cesium/app/static/DST/js/MeterHud.js",
		"/home/varun/PX2/MAVProxy/MAVProxy/modules/lib/wxhorizon_util.py",
		"/home/varun/PX2/MAVProxy/MAVProxy/modules/lib/wxhorizon_ui.py",
		"/home/varun/PX2/MAVProxy/MAVProxy/modules/lib/mp_module.py",
		"/home/varun/PX2/MAVProxy/.gitignore",
		"/.gitignore",
		"/home/varun/PX2/MAVProxy/gitignore",
		"/run/user/1000/gvfs/archive:host=file%253A%252F%252F%252Fmedia%252Fvarun%252FUBUNTU%25252016_0%252FVarun%252FAptoncd%252Faptoncd-20170401-CD1.iso/README.diskdefines",
		"/home/varun/Downloads/.bash_aliases",
		"/home/varun/.bash_aliases"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			"/home/varun/PX2/MAVProxy/MAVProxy/modules/mavproxy_cesium",
			"/home/varun/PX2/MAVProxy/MAVProxy/modules/mavproxy_cesium/app/static/DST/js",
			"/home/varun/PX2/MAVProxy/MAVProxy/modules/mavproxy_cesium",
			"/home/varun/PX2/MAVProxy"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"bootstrap.min.css.map",
			"css.map",
			"attitude.html",
			"base.html",
			"index.html",
			"content",
			"data_stream",
			"setInterval",
			"draw",
			"Cesi",
			"*.py",
			".py",
			"creditD",
			"creditDisplay",
			"Copernicus",
			"Produced using Copernicus data",
			"Analytical Graphics",
			"credit",
			"data_stream",
			"breach_time",
			"FENCE_STATUS",
			"data_stream",
			".\t\t\t\t\t\t",
			"NAV_CONTROLLER",
			"data_stream.NAV_CONTROLLER_OUTPUT",
			"data_stream",
			"pitch",
			"Tester",
			"filltext",
			"inner",
			"free",
			"NAV_CONTROLLER_OUTPUT.",
			"NAV_CONTROLLER",
			"get_mav_param",
			"SET_HOME_POSITION",
			"NAV_CONTROLLER_OUTPUT",
			"VFR_HUD"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 4,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "MAVProxy/modules/mavproxy_cesium/app/static/DST/js/hud.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13597,
						"regions":
						{
						},
						"selection":
						[
							[
								32,
								32
							]
						],
						"settings":
						{
							"auto_complete": false,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "MAVProxy/modules/mavproxy_cesium/__init__.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10380,
						"regions":
						{
						},
						"selection":
						[
							[
								2353,
								2353
							]
						],
						"settings":
						{
							"auto_complete": false,
							"syntax": "Packages/Djaneiro/Syntaxes/Python Django.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 982.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "MAVProxy/modules/mavproxy_cesium/app/cesium_web_server.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2183,
						"regions":
						{
						},
						"selection":
						[
							[
								1808,
								1808
							]
						],
						"settings":
						{
							"auto_complete": false,
							"syntax": "Packages/Djaneiro/Syntaxes/Python Django.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 225.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "MAVProxy/modules/mavproxy_cesium/README.md",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 5977,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "MAVProxy/modules/mavproxy_cesium/app/templates/base.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 186,
						"regions":
						{
						},
						"selection":
						[
							[
								186,
								186
							]
						],
						"settings":
						{
							"auto_complete": false,
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "MAVProxy/modules/mavproxy_cesium/app/static/DST/js/core.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25469,
						"regions":
						{
						},
						"selection":
						[
							[
								1271,
								1271
							]
						],
						"settings":
						{
							"auto_complete": false,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "MAVProxy/modules/mavproxy_cesium/app/templates/index.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3773,
						"regions":
						{
						},
						"selection":
						[
							[
								1061,
								1061
							]
						],
						"settings":
						{
							"auto_complete": false,
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "MAVProxy/modules/mavproxy_cesium/app/static/DST/js/add_fun.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 935,
						"regions":
						{
						},
						"selection":
						[
							[
								935,
								935
							]
						],
						"settings":
						{
							"auto_complete": false,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "gcs.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"confi",
				"material-start/app/config.js"
			],
			[
				"cesuim.css",
				"MAVProxy/modules/mavproxy_cesium/app/static/DST/css/cesium.css"
			],
			[
				"cesium",
				"mavproxy_cesium/app/static/DST/css/cesium.css"
			],
			[
				"wxho",
				"MAVProxy/MAVProxy/modules/lib/wxhorizon_util.py"
			],
			[
				"hud",
				"mavproxy_cesium/app/static/DST/js/hud.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/PX2/MAVProxy/gcs.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 167.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
